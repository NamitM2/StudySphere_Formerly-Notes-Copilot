-- Migration: Add visual content support for images in PDFs
-- This allows the system to extract, understand, and search through diagrams, charts, and images

-- Table to store extracted images from documents
CREATE TABLE IF NOT EXISTS images (
    id BIGSERIAL PRIMARY KEY,
    doc_id BIGINT NOT NULL REFERENCES documents(id) ON DELETE CASCADE,
    page INTEGER NOT NULL,
    image_index INTEGER NOT NULL, -- Index of image on the page (0-based)

    -- Image metadata
    width INTEGER,
    height INTEGER,
    format TEXT, -- 'png', 'jpeg', etc.

    -- Storage
    storage_path TEXT NOT NULL, -- Path in Supabase storage
    byte_size INTEGER,

    -- AI-generated description and metadata
    description TEXT, -- Generated by vision model
    caption TEXT, -- Extracted caption if found near image
    image_type TEXT, -- 'diagram', 'chart', 'graph', 'photo', 'equation', etc.

    -- Timestamps
    created_at TIMESTAMPTZ DEFAULT NOW(),

    -- Unique constraint: one entry per image per page per document
    UNIQUE(doc_id, page, image_index)
);

-- Table to store searchable chunks for visual content
-- Similar to text chunks but for image descriptions
CREATE TABLE IF NOT EXISTS visual_chunks (
    id BIGSERIAL PRIMARY KEY,
    image_id BIGINT NOT NULL REFERENCES images(id) ON DELETE CASCADE,
    doc_id BIGINT NOT NULL REFERENCES documents(id) ON DELETE CASCADE,

    -- Content for RAG
    text TEXT NOT NULL, -- Combined: description + caption + context
    page INTEGER NOT NULL,

    -- Vector embedding of the visual content description
    embedding vector(768), -- Same dimension as text embeddings

    -- Metadata
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_images_doc_id ON images(doc_id);
CREATE INDEX IF NOT EXISTS idx_images_page ON images(page);
CREATE INDEX IF NOT EXISTS idx_visual_chunks_doc_id ON visual_chunks(doc_id);
CREATE INDEX IF NOT EXISTS idx_visual_chunks_image_id ON visual_chunks(image_id);

-- Vector similarity index (using HNSW for fast approximate search)
CREATE INDEX IF NOT EXISTS idx_visual_chunks_embedding ON visual_chunks
USING hnsw (embedding vector_cosine_ops);

-- Function to search both text and visual chunks together
-- This extends the existing search_chunks function to include images
CREATE OR REPLACE FUNCTION search_chunks_multimodal(
    p_user_id TEXT,
    p_query_embedding vector(768),
    p_match_count INT DEFAULT 10,
    p_include_visual BOOLEAN DEFAULT TRUE
)
RETURNS TABLE (
    doc_id BIGINT,
    chunk_id BIGINT,
    filename TEXT,
    page INTEGER,
    text TEXT,
    distance FLOAT,
    content_type TEXT, -- 'text' or 'visual'
    image_id BIGINT,
    image_description TEXT,
    image_type TEXT
)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    WITH text_results AS (
        SELECT
            c.doc_id,
            c.id as chunk_id,
            d.filename,
            c.page,
            c.text,
            (c.embedding <=> p_query_embedding) as distance,
            'text'::TEXT as content_type,
            NULL::BIGINT as image_id,
            NULL::TEXT as image_description,
            NULL::TEXT as image_type
        FROM chunks c
        JOIN documents d ON c.doc_id = d.id
        WHERE d.user_id::text = p_user_id
    ),
    visual_results AS (
        SELECT
            vc.doc_id,
            vc.id as chunk_id,
            d.filename,
            vc.page,
            vc.text,
            (vc.embedding <=> p_query_embedding) as distance,
            'visual'::TEXT as content_type,
            i.id as image_id,
            i.description as image_description,
            i.image_type
        FROM visual_chunks vc
        JOIN documents d ON vc.doc_id = d.id
        JOIN images i ON vc.image_id = i.id
        WHERE d.user_id::text = p_user_id
          AND p_include_visual = TRUE
    ),
    combined AS (
        SELECT * FROM text_results
        UNION ALL
        SELECT * FROM visual_results
    )
    SELECT * FROM combined
    ORDER BY distance ASC
    LIMIT p_match_count;
END;
$$;

-- Add comment for documentation
COMMENT ON TABLE images IS 'Stores extracted images from PDF documents with AI-generated descriptions';
COMMENT ON TABLE visual_chunks IS 'Searchable vector embeddings of image descriptions for multimodal RAG';
COMMENT ON FUNCTION search_chunks_multimodal IS 'Unified search across text and visual content using vector similarity';
